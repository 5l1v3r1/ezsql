<?php
require_once('ez_sql_loader.php');

require 'vendor/autoload.php';
use PHPUnit\Framework\TestCase;

/**
 * Test class for ezFunctions.
 * Generated by PHPUnit
 *
 * @Author:  Lawrence Stubbs <technoexpressnet@gmail.com>
 * @name    ezFunctionsTest
 * @package ezSQL
 * @subpackage Tests
 */
class ezFunctionsTest extends TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {        
    } // setUp

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    } // tearDown

 
    /**
     * @covers ezQuery::eq 
     */
    public function testeq()
    {
        $this->assertInternalType('array',eq('field', 'data'));
        $this->assertArraySubset([1 => EQ], eq('field', 'data'));
    }

    /**
     * @covers ezQuery::neq
     */
    public function testneq()
    {
        $this->assertInternalType('array',neq('field', 'data'));
        $this->assertArraySubset([3 => _AND], neq('field', 'data', _AND));
    }

    /**
     * @covers ezQuery::ne
     */
    public function testne()
    {
        $this->assertInternalType('array',ne('field', 'data'));
        $this->assertArraySubset([4 => 'extra'], ne('field', 'data', _AND, 'extra'));
    }
    
    /**
     * @covers ezQuery::lt
     */
    public function testlt()
    {
        $this->assertInternalType('array',lt('field', 'data'));
        $this->assertArraySubset([2 => 'data'], lt('field', 'data'));
    }

    /**
     * @covers ezQuery::lte
     */
    public function testlte()
    {
        $this->assertInternalType('array',lte('field', 'data'));
        $this->assertArraySubset([0 => 'field'], lte('field', 'data'));
    }

    /**
     * @covers ezQuery::gt
     */
    public function testgt()
    {
        $this->assertInternalType('array',gt('field', 'data'));
        $this->assertArraySubset([0 => 'field'], gt('field', 'data'));
    }

    /**
     * @covers ezQuery::gte
     */
    public function testgte()
    {
        $this->assertInternalType('array',gte('field', 'data'));
        $this->assertArraySubset([0 => 'field'], gte('field', 'data'));
    }

    /**
     * @covers ezQuery::isNull
     */
    public function testisNull()
    {
        $this->assertInternalType('array',isNull('field'));
        $this->assertArraySubset([2 => 'null'], isNull('field'));
    }

    /**
     * @covers ezQuery::isNotNull
     */
    public function testisNotNull()
    {
        $this->assertInternalType('array',isNotNull('field'));
        $this->assertArraySubset([2 => 'null'], isNotNull('field'));
    }

    /**
     * @covers ezQuery::like
     */
    public function testlike()
    {
        $this->assertInternalType('array',like('field', 'data'));
        $this->assertArraySubset([2 => 'data'], like('field', 'data'));
    }

    /**
     * @covers ezQuery::notLike
     */
    public function testnotLike()
    {
        $this->assertInternalType('array',notLike('field', 'data'));
        $this->assertArraySubset([2 => 'data'], notLike('field', 'data'));
    }

    /**
     * @covers ezQuery::in
     */
    public function testin()
    {
        $this->assertInternalType('array',in('field', 'data'));
        $this->assertArraySubset([8 => 'data6'], in('field', 'data', 'data1', 'data2', 'data3', 'data4', 'data5', 'data6'));
    }

    /**
     * @covers ezQuery:: notIn
     */
    public function testnotIn()
    {
        $this->assertInternalType('array',notIn('field', 'data'));
        $this->assertArraySubset([5 => 'data3'], notIn('field', 'data', 'data1', 'data2', 'data3', 'data4', 'data5', 'data6'));
    }

    /**
     * @covers ezQuery::between
     */
    public function testbetween()
    {
        $this->assertInternalType('array',between('field', 'data', 'data2'));
        $this->assertArraySubset([1 => _BETWEEN], between('field', 'data', 'data2'));
    }

    /**
     * @covers ezQuery::notBetween
     */
    public function testnotBetween()
    {
        $this->assertInternalType('array',notBetween('field', 'data', 'data2'));
        $this->assertArraySubset([3 => 'data2'], notBetween('field', 'data', 'data2'));
    }

    /**
     * @covers ezQuery::select
     */
    public function testselect() {
        $this->assertFalse(select(''));
    } 

    /**
     * @covers ezQuery::select_into
     */    
    public function testselect_into() {
        $this->assertFalse(select_into('field', 'data', 'data2'));
    } 

    /**
     * @covers ezQuery::insert_select
     */    
    public function testinsert_select() {
        $this->assertFalse(insert_select('field', 'data', 'data2'));
    }     

    /**
     * @covers ezQuery::create_select
     */    
    public function testcreate_select() {
        $this->assertFalse(create_select('field', 'data', 'data2'));
    }  

    /**
     * @covers ezQuery::where
     */    
    public function testwhere() {
        $this->assertFalse(where('field', 'data', 'data2'));
    } 

    /**
     * @covers ezQuery::groupBy
     */    
    public function testgroupBy() {
        $this->assertNotNull(groupBy('field'));
    } 
 
    /**
     * @covers ezQuery::having
     */   
    public function testhaving() {
        $this->assertFalse(having('field', 'data', 'data2'));
    }

    /**
     * @covers ezQuery::orderBy
     */    
    public function testorderBy() {
        $this->assertNotNull(orderBy('field', 'data'));
    } 

    /**
     * @covers ezQuery::insert
     */    
    public function testinsert() {
        $this->assertFalse(insert('field', 'data', 'data2'));
    } 

    /**
     * @covers ezQuery::update
     */    
    public function testupdate() {
        $this->assertFalse(update('field', 'data', 'data2'));
    } 

    /**
     * @covers ezQuery::delete
     */    
    public function testdelete() {
        $this->assertFalse(delete('field', 'data', 'data2'));
    } 

    /**
     * @covers ezQuery::replace
     */        
    public function testreplace() {
        $this->assertFalse(replace('field', 'data', 'data2'));
    }  
} //
