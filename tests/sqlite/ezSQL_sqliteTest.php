<?php
require_once('ez_sql_loader.php');

require 'vendor/autoload.php';
use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-03-08 at 03:02:11.
 */
class ezSQL_sqliteTest extends TestCase
{
    /**
     * constant string path and file name of the SQLite test database
     */
    const TEST_SQLITE_DB = 'ez_test.sqlite';
    
    /**
     * @var ezSQL_sqlite
     */
    protected $object;
    private $errors;
 
    function errorHandler($errno, $errstr, $errfile, $errline, $errcontext) {
        $this->errors[] = compact("errno", "errstr", "errfile",
            "errline", "errcontext");
    }

    function assertError($errstr, $errno) {
        foreach ($this->errors as $error) {
            if ($error["errstr"] === $errstr
                && $error["errno"] === $errno) {
                return;
            }
        }
        $this->fail("Error with level " . $errno .
            " and message '" . $errstr . "' not found in ", 
            var_export($this->errors, TRUE));
    }   

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if (!extension_loaded('sqlite')) {
            $this->markTestSkipped(
              'The sqlite Lib is not available.'
            );
        }
        $this->object = new ezSQL_sqlite('./',self::TEST_SQLITE_DB); 
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers ezSQL_sqlite::connect
     * @todo   Implement testConnect().
     */
    public function testConnect()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ezSQL_sqlite::quick_connect
     * @todo   Implement testQuick_connect().
     */
    public function testQuick_connect()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ezSQL_sqlite::select
     * @todo   Implement testSelect().
     */
    public function testSelect()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ezSQL_sqlite::escape
     * @todo   Implement testEscape().
     */
    public function testEscape()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ezSQL_sqlite::sysdate
     * @todo   Implement testSysdate().
     */
    public function testSysdate()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ezSQL_sqlite::query
     */
    public function testQuery()
    {
        // Create a table..
        $this->assertEquals(0, $this->object->query("DROP TABLE test_table;"));
        $this->assertEquals(0,$this->object->query("CREATE TABLE test_table ( MyColumnA INTEGER PRIMARY KEY, MyColumnB TEXT(32) );"));

        // Insert test data
        for($i=0;$i<3;++$i)
        {
            $this->assertEquals(1, $this->object->query('INSERT INTO test_table (MyColumnB) VALUES ("'.md5(microtime()).'");'));
        }
	
        // Get list of tables from current database..
        $my_tables = $this->object->get_results("SELECT * FROM sqlite_master WHERE sql NOTNULL;");
        
        // Loop through each row of results..
        foreach ( $my_tables as $table )
        {
            // Get results of DESC table..
            $this->assertNotNull($this->object->get_results("SELECT * FROM $table->name;"));
        }

        // Get rid of the table we created..
        $this->assertEquals(0, $this->object->query("DROP TABLE test_table;"));
    }   
    
    /**
     * @covers ezSQL_sqlite::__construct
     */
    public function test__Construct() {   
        $this->errors = array();
        set_error_handler(array($this, 'errorHandler'));    
        
        $sqlite = $this->getMockBuilder(ezSQL_sqlite::class)
        ->setMethods(null)
        ->disableOriginalConstructor()
        ->getMock();
        
        $this->assertNull($sqlite->__construct());  
    } 
    
}
