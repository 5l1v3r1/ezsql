build: false
platform:
  - x64
clone_folder: c:\projects\php-project-workspace

## Build matrix for lowest and highest possible targets
environment:
  matrix:
  - dependencies: lowest
    php_ver_target: 7.0
  - dependencies: current
    php_ver_target: 7.1
  - dependencies: highest
    php_ver_target: 7.2
  DB_CLIENTS: mysql,postgresql,sqlserver,sqlite
  # postgres
  POSTGRES_PORT: tcp://localhost:5432
  POSTGRES_ENV_POSTGRES_USER: postgres
  POSTGRES_ENV_POSTGRES_PASSWORD: ezTest
  POSTGRES_ENV_POSTGRES_DB: ez_test
  POSTGRES_PATH: C:\Program Files\PostgreSQL\9.4
  PGUSER: postgres
  PGPASSWORD: ezTest
  # mysql
  MYSQL_PORT: tcp://localhost:3306
  MYSQL_ENV_MYSQL_USER: root
  MYSQL_ENV_MYSQL_PASSWORD: ezTest
  MYSQL_ENV_MYSQL_DATABASE: ez_test
  MYSQL_PATH: C:\Program Files\MySql\MySQL Server 5.7
  MYSQL_PWD: ezTest
  # sql server
  SQLSERVER_ENV_SQLSERVER_HOST: localhost
  SQLSERVER_ENV_SQLSERVER_PORT: 1433
  SQLSERVER_ENV_SQLSERVER_USER: sa
  SQLSERVER_ENV_SQLSERVER_PASSWORD: ezTest
  SQLSERVER_ENV_SQLSERVER_DATABASE: ez_test

services:
    - mssql2014
    - mysql
    - postgresql
    
## Cache composer, chocolatey and php bits
cache:
    - '%LOCALAPPDATA%\Composer\files -> composer.lock'
    - composer.phar
    # Cache chocolatey packages
    - C:\ProgramData\chocolatey\bin -> .appveyor.yml
    - C:\ProgramData\chocolatey\lib -> .appveyor.yml
    # Cache php install
    - c:\tools\php -> .appveyor.yml
    
## Set up environment variables
init:
    - SET PATH=C:\Program Files\OpenSSL;c:\tools\php;C:\Program Files\PostgreSQL\9.4\bin\;C:\Program Files\MySql\MySQL Server 5.7\bin\;%PATH%
    - SET COMPOSER_NO_INTERACTION=1
    - SET PHP=1 # This var is connected to PHP install cache
    - SET ANSICON=121x90 (121x90)
    
## Install PHP and composer, and run the appropriate composer command
install:
    - IF EXIST c:\tools\php (SET PHP=0) # Checks for the PHP install being cached
    - ps: appveyor-retry cinst --params '""/InstallDir:C:\tools\php""' --ignore-checksums -y php --version ((choco search php --exact --all-versions -r | select-string -pattern $env:php_ver_target | sort { [version]($_ -split '\|' | select -last 1) } -Descending | Select-Object -first 1) -replace '[php|]','')
    - cd c:\tools\php
    - IF %PHP%==1 copy php.ini-production php.ini /Y
    - IF %PHP%==1 echo date.timezone="UTC" >> php.ini
    - IF %PHP%==1 echo extension_dir=ext >> php.ini
    - IF %PHP%==1 echo extension=php_openssl.dll >> php.ini
    - IF %PHP%==1 echo extension=php_mbstring.dll >> php.ini
    - IF %PHP%==1 echo extension=php_fileinfo.dll >> php.ini
    - IF %PHP%==1 echo extension=php_mysqli.dll >> php.ini
    - IF %PHP%==1 echo extension=php_pdo_mysql.dll >> php.ini
    - IF %PHP%==1 echo extension=php_pdo_odbc.dll >> php.ini
    - IF %PHP%==1 echo extension=php_pdo_pgsql.dll >> php.ini
    - IF %PHP%==1 echo extension=php_pdo_sqlite.dll >> php.ini
    - IF %PHP%==1 echo extension=php_pgsql.dll >> php.ini
    - IF %PHP%==1 echo extension=php_sqlite3.dll >> php.ini
    - IF %PHP%==1 echo @php %%~dp0composer.phar %%* > composer.bat
    - appveyor-retry appveyor DownloadFile https://getcomposer.org/composer.phar
    - cd c:\projects\php-project-workspace
    - IF %dependencies%==lowest appveyor-retry composer update --prefer-lowest --no-progress --profile -n
    - IF %dependencies%==current appveyor-retry composer install --no-progress --profile
    - IF %dependencies%==highest appveyor-retry composer update --no-progress --profile -n
    - ps: |
    # Get and install the MSSQL DLL's
          $DLLVersion = "5.2.0rc1"
          cd c:\tools\php\ext
          $source = "https://windows.php.net/downloads/pecl/releases/sqlsrv/$($DLLVersion)/php_sqlsrv-$($DLLVersion)-$($env:php)-nts-vc15-x64.zip"
          $destination = "c:\tools\php\ext\php_sqlsrv-$($DLLVersion)-$($env:php)-nts-vc15-x64.zip"
          Invoke-WebRequest $source -OutFile $destination
          7z x -y php_sqlsrv-$($DLLVersion)-$($env:php)-nts-vc15-x64.zip > $null
          $source = "https://windows.php.net/downloads/pecl/releases/pdo_sqlsrv/$($DLLVersion)/php_pdo_sqlsrv-$($DLLVersion)-$($env:php)-nts-vc15-x64.zip"
          $destination = "c:\tools\php\ext\php_pdo_sqlsrv-$($DLLVersion)-$($env:php)-nts-vc15-x64.zip"
          Invoke-WebRequest $source -OutFile $destination
          7z x -y php_pdo_sqlsrv-$($DLLVersion)-$($env:php)-nts-vc15-x64.zip > $null
          Remove-Item c:\tools\php\* -include .zip
          cd c:\tools\php
          Add-Content php.ini "`nextension=php_sqlsrv.dll"
          Add-Content php.ini "`nextension=php_pdo_sqlsrv.dll"
          Add-Content php.ini "`n"
    - composer require php-coveralls/php-coveralls
    - composer show
    
build_script:
  # postgres
  - psql -c 'CREATE DATABASE ez_test;' -U postgres
  - psql -c "CREATE USER ez_test WITH PASSWORD 'ezTest';" -U postgres
  # mysql
  - mysql -e 'CREATE DATABASE ez_test;'
  - mysql -e 'GRANT ALL PRIVILEGES ON ez_test.* TO ez_test@localhost;'
  - mysql -e "SET PASSWORD FOR 'ez_test'@'localhost' = PASSWORD('ezTest')"
  # sqlserver
  - ps: ./appveyor-sqlserver.ps1 MSSQL2014
  - sqlcmd -S localhost,1433 -U sa -P ezTest -Q "CREATE DATABASE ez_test" -d "master"
  - sqlcmd -S localhost,1433 -U sa -P ezTest -Q "CREATE LOGIN ez_test WITH PASSWORD=N'ezTest', DEFAULT_DATABASE=ez_test, CHECK_EXPIRATION=ON, CHECK_POLICY=ON; ALTER SERVER ROLE [sysadmin] ADD MEMBER ez_test" 
  - sqlcmd -S localhost,1433 -U sa -P ezTest -Q "select table_name from information_schema.tables" -d "ez_test"
     
on_success:
  - appveyor-retry php vendor/bin/php-coveralls
  
## Run the actual test
test_script:
    - cd c:\projects\php-project-workspace
    - mkdir build\logs
    - vendor/bin/phpunit --coverage-clover build\logs\clover.xml
    